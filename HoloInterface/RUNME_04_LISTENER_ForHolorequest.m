% Version updated for Frankenscope duty 12/16/17 ARM
% reads hologram and roi data and complies hologram sequencs then runs a listener 


% try to stop SLM in case it's already running
try;
[Setup.SLM ] = Function_Stop_SLM( Setup.SLM );
end;

clear all; close all; clc;

% see load_parameters to setup the daq session
[Setup ] = function_loadparameters(2);
Setup.CGHMethod=1;  % 1= Superposition (2 for NOVO-CGH)
cycleiterations =1; % Change this number to repeat the sequence N times instead of just once

%Overwrite delay duration
Setup.TimeToPickSequence = 0.05; %window to select sequence ID in seconds (listener will integrate the number of digital pulses over this time window)
Setup.SLM.timeout_ms = 500;      %times out in this many ms if a hologram is not selected after the sequence is selected
calibID = 2;                     % Select the calibration ID

%%
%load calibration file
try
    load([Setup.Datapath '\07_XYZ_Calibration.mat']);
catch
    disp('Missing Spatial calibration file')
end

%load ROIdata file generated by ROIanalysis 
try
 load([Setup.Holorequestpath 'ROIData.mat']);
catch
 disp('No ROIData file')
 return
end

%load the holoRequest file which contains parameters for the hologram sequence
load([Setup.Holorequestpath 'HoloRequest.mat']);

LN = numel(ROIdata.rois);  % number of targeteds 
SICoordinates = zeros(3,LN); %get SI coordinates x y z (Optotune or fastZ units)

for i = 1:LN  %for each target

u = mean(ROIdata.rois(i).vertices);  %get the mean vertices
u(1)=u(1)+holoRequest.xoffset;  %add offsets, if they exist (this can be for testing spatial resolution or to compensate for small drift without full realignment)
u(2)=u(2)+holoRequest.yoffset;

SICoordinates(1:2,i) = u;
SICoordinates(3,i) = ROIdata.rois(i).OptotuneDepth;
end


SLMCoordinates = zeros(4,LN);  %x y z power adjust

%Convert ot SLM coordinates
SLMCoordinates(1,:) = polyvaln(COC.SI_SLM_X{calibID} ,SICoordinates');
SLMCoordinates(2,:) = polyvaln(COC.SI_SLM_Y{calibID} ,SICoordinates');
SLMCoordinates(3,:) = polyvaln(COC.SI_SLM_Z{calibID} ,SICoordinates');

%Add power
SLMCoordinates(4,:) = 1./function_Power_Adjust( SLMCoordinates(1:3,:)',COC ); 

AttenuationCoeffs = function_Power_Adjust( SLMCoordinates(1:3,:)', COC );

%%%%%%%%%%%%%%%%%%%%

f = figure(1);
subplot(1,2,1)
scatter3(SICoordinates(1,:),SICoordinates(2,:),SICoordinates(3,:),[],SLMCoordinates(4,:),'filled'); colorbar;
xlabel('X, SI coordinates');ylabel('Y, SI coordinates'); zlabel('Z, SI coordinates'); title('Intensity Correction coefficients');
subplot(1,2,2)
scatter3(SLMCoordinates(1,:),SLMCoordinates(2,:),SLMCoordinates(3,:),[],SLMCoordinates(4,:),'filled'); colorbar;
xlabel('X, SLM coordinates');ylabel('Y, SLM coordinates'); zlabel('Z, SLM coordinates'); title('Intensity Correction coefficients');
pause(3); close(f);

Setup.verbose =0;
hololist = zeros(Setup.Nx,Setup.Ny, numel(holoRequest.rois),'uint8');
DE = linspace(0,0,numel(holoRequest.rois));
for j = 1:numel(holoRequest.rois)
    disp(['Now compiling hologram ' int2str(j) ' of ' int2str(numel(holoRequest.rois))])
    ROIselection = holoRequest.rois{j};
    myattenuation = AttenuationCoeffs(ROIselection);
    energy = 1./myattenuation; energy = energy/sum(energy);
    DE(j) = sum(energy.*myattenuation);
    disp(['Diffraction efficiency of the hologram : ' int2str(100*DE(j)) '%']);
    subcoordinates = SLMCoordinates(:,ROIselection);
    [ Hologram,Reconstruction,Masksg ] = function_Make_3D_SHOT_Holos( Setup,subcoordinates' );
    hololist(:,:,j) = Hologram;
% compile holograms    
end



DE_list=DE;
%locations=FrankenScopeRigFile();
save('Y:\holography\FrankenRig\HoloRequest-DAQ\HoloRequest.mat','DE_list','-append')
%appened the diffraction efficiency list to the holorequest copy saved for the DAQ to pick up so it can dynamically adjust power

LSequences = numel(holoRequest.Sequence);
sequences = {};

for i = 1:LSequences
    sequence = {};
    
    for iterations = 1:cycleiterations
    for j = 1:numel(holoRequest.Sequence{i})
        sequence{(iterations-1)*numel(holoRequest.Sequence{i})+j} =  squeeze(hololist(:,:,holoRequest.Sequence{i}(j)));
    end
    end
    sequences{i} = sequence;
end

[Setup.SLM ] = Function_Stop_SLM( Setup.SLM );
Setup.SLM.wait_For_Trigger= 1;
[ Setup.SLM ] = Function_Start_SLM( Setup.SLM );
Function_shoot_sequences_due(Setup,sequences,cycleiterations);
[Setup.SLM ] = Function_Stop_SLM( Setup.SLM );

disp('Update Holorequest or ROIS and relaunch, otherwise, see you next time !')







       
